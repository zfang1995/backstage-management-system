Compiler {
  _pluginCompat:
   SyncBailHook {
     _args: [ 'options' ],
     taps: [ [Object], [Object], [Object] ],
     interceptors: [],
     call: [Function: lazyCompileHook],
     promise: [Function: lazyCompileHook],
     callAsync: [Function: lazyCompileHook],
     _x: undefined },
  hooks: {
     shouldEmit:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     done:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     additionalPass:
      AsyncSeriesHook {
        _args: [],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeRun:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     run:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     emit:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [Array],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterEmit:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [Array],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     thisCompilation:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compilation:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     normalModuleFactory:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     contextModuleFactory:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeCompile:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compile:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     make:
      AsyncParallelHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterCompile:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchRun:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: undefined,
        promise: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [Array] },
     failed:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     invalid:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchClose:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     environment:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterEnvironment:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterPlugins:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterResolvers:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     entryOption:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: anonymous],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] } },
  name: undefined,
  parentCompilation: undefined,
  outputPath: 'C:\\Users\\zf\\OneDrive\\project\\my-management-system\\dist',
  outputFileSystem:
   NodeOutputFileSystem {
     mkdirp:
      { [Function: mkdirP]
        mkdirP: [Circular],
        mkdirp: [Circular],
        sync: [Function: sync] },
     mkdir: [Function: bound ],
     rmdir: [Function: bound ],
     unlink: [Function: bound ],
     writeFile: [Function: bound ],
     join: [Function: bound join] },
  inputFileSystem:
   CachedInputFileSystem {
     fileSystem: NodeJsInputFileSystem {},
     _statStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readdirStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readFileStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readJsonStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readlinkStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _stat: [Function: bound bound ],
     _statSync: [Function: bound bound ],
     _readdir: [Function: bound readdir],
     _readdirSync: [Function: bound readdirSync],
     _readFile: [Function: bound bound readFile],
     _readFileSync: [Function: bound bound ],
     _readJson: [Function],
     _readJsonSync: [Function],
     _readlink: [Function: bound bound ],
     _readlinkSync: [Function: bound bound ] },
  recordsInputPath: undefined,
  recordsOutputPath: undefined,
  records: {},
  removedFiles: Set {},
  fileTimestamps: Map {},
  contextTimestamps: Map {},
  resolverFactory:
   ResolverFactory {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        call: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     hooks: { resolveOptions: [Object], resolver: [Object] },
     cache1: WeakMap {},
     cache2: Map {} },
  resolvers:
   { normal:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     loader:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     context:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] } },
  options:
   { mode: 'development',
     context: 'C:\\Users\\zf\\OneDrive\\project\\my-management-system',
     devtool: 'source-map',
     node:
      { setImmediate: false,
        process: 'mock',
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty',
        console: false,
        global: true,
        Buffer: true,
        __filename: 'mock',
        __dirname: 'mock' },
     output:
      { path: 'C:\\Users\\zf\\OneDrive\\project\\my-management-system\\dist',
        filename: '[name].js',
        publicPath: '/',
        globalObject: 'this',
        chunkFilename: '[name].js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: true,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     resolve:
      { alias: [Object],
        extensions: [Array],
        modules: [Array],
        unsafeCache: true,
        mainFiles: [Array],
        aliasFields: [Array],
        mainFields: [Array],
        cacheWithContext: false },
     resolveLoader:
      { modules: [Array],
        unsafeCache: true,
        mainFields: [Array],
        extensions: [Array],
        mainFiles: [Array],
        cacheWithContext: false },
     module:
      { noParse: /^(vue|vue-router|vuex|vuex-router-sync)$/,
        rules: [Array],
        unknownContextRequest: '.',
        unknownContextRegExp: false,
        unknownContextRecursive: true,
        unknownContextCritical: true,
        exprContextRequest: '.',
        exprContextRegExp: false,
        exprContextRecursive: true,
        exprContextCritical: true,
        wrappedContextRegExp: /.*/,
        wrappedContextRecursive: true,
        wrappedContextCritical: false,
        strictExportPresence: false,
        strictThisContextOnImports: false,
        unsafeCache: true,
        defaultRules: [Array] },
     plugins:
      [ VueLoaderPlugin {},
        [Object],
        [Object],
        [Object],
        [Object],
        NoEmitOnErrorsPlugin {},
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     entry: { app: [Array] },
     cache: true,
     target: 'web',
     performance: false,
     optimization:
      { removeAvailableModules: true,
        removeEmptyChunks: true,
        mergeDuplicateChunks: true,
        flagIncludedChunks: false,
        occurrenceOrder: false,
        sideEffects: false,
        providedExports: true,
        usedExports: false,
        concatenateModules: false,
        splitChunks: [Object],
        runtimeChunk: undefined,
        noEmitOnErrors: false,
        checkWasmTypes: false,
        mangleWasmImports: false,
        namedModules: true,
        hashedModuleIds: false,
        namedChunks: true,
        portableRecords: false,
        minimize: false,
        minimizer: [Array],
        nodeEnv: 'development' } },
  context: 'C:\\Users\\zf\\OneDrive\\project\\my-management-system',
  requestShortener:
   RequestShortener {
     currentDirectoryRegExp: /(^|!)C:\/Users\/zf\/OneDrive\/project\/my\-management\-system/g,
     parentDirectoryRegExp: /(^|!)C:\/Users\/zf\/OneDrive\/project/g,
     buildinsAsModule: true,
     buildinsRegExp: /(^|!)C:\/Users\/zf\/OneDrive\/project\/my\-management\-system\/node_modules\/webpack/g,
     cache: Map {} },
  running: true,
  watchMode: true,
  watchFileSystem:
   NodeWatchFileSystem {
     inputFileSystem:
      CachedInputFileSystem {
        fileSystem: NodeJsInputFileSystem {},
        _statStorage: [Object],
        _readdirStorage: [Object],
        _readFileStorage: [Object],
        _readJsonStorage: [Object],
        _readlinkStorage: [Object],
        _stat: [Function: bound bound ],
        _statSync: [Function: bound bound ],
        _readdir: [Function: bound readdir],
        _readdirSync: [Function: bound readdirSync],
        _readFile: [Function: bound bound readFile],
        _readFileSync: [Function: bound bound ],
        _readJson: [Function],
        _readJsonSync: [Function],
        _readlink: [Function: bound bound ],
        _readlinkSync: [Function: bound bound ] },
     watcherOptions: { aggregateTimeout: 200 },
     watcher:
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        options: [Object],
        watcherOptions: [Object],
        fileWatchers: [],
        dirWatchers: [],
        mtimes: {},
        paused: false,
        aggregatedChanges: [],
        aggregatedRemovals: [],
        aggregateTimeout: 0,
        _onTimeout: [Function: bound _onTimeout] } },
  dependencies: undefined }